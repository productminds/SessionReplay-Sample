(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/@amplitude/session-replay-browser/lib/esm/observers.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "NetworkObservers": (()=>NetworkObservers)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tslib/tslib.es6.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amplitude$2f$analytics$2d$core$2f$lib$2f$esm$2f$global$2d$scope$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@amplitude/analytics-core/lib/esm/global-scope.js [app-client] (ecmascript)");
;
;
var NetworkObservers = function() {
    function NetworkObservers() {
        this.fetchObserver = null;
    }
    NetworkObservers.prototype.start = function(eventCallback) {
        this.eventCallback = eventCallback;
        this.observeFetch();
    };
    NetworkObservers.prototype.stop = function() {
        var _a;
        (_a = this.fetchObserver) === null || _a === void 0 ? void 0 : _a.call(this);
        this.fetchObserver = null;
        this.eventCallback = undefined;
    };
    NetworkObservers.prototype.notifyEvent = function(event) {
        var _a;
        (_a = this.eventCallback) === null || _a === void 0 ? void 0 : _a.call(this, event);
    };
    NetworkObservers.prototype.observeFetch = function() {
        var _this = this;
        var globalScope = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$amplitude$2f$analytics$2d$core$2f$lib$2f$esm$2f$global$2d$scope$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getGlobalScope"])();
        if (!globalScope) return;
        var originalFetch = globalScope.fetch;
        if (!originalFetch) return;
        globalScope.fetch = function(input, init) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__awaiter"])(_this, void 0, void 0, function() {
                var startTime, requestEvent, response, endTime, headers_1, error_1, endTime, typedError;
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tslib$2f$tslib$2e$es6$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["__generator"])(this, function(_a) {
                    switch(_a.label){
                        case 0:
                            startTime = Date.now();
                            requestEvent = {
                                timestamp: startTime,
                                type: 'fetch',
                                method: (init === null || init === void 0 ? void 0 : init.method) || 'GET',
                                url: input.toString(),
                                requestHeaders: init === null || init === void 0 ? void 0 : init.headers
                            };
                            _a.label = 1;
                        case 1:
                            _a.trys.push([
                                1,
                                3,
                                ,
                                4
                            ]);
                            return [
                                4 /*yield*/ ,
                                originalFetch(input, init)
                            ];
                        case 2:
                            response = _a.sent();
                            endTime = Date.now();
                            requestEvent.status = response.status;
                            requestEvent.duration = endTime - startTime;
                            headers_1 = {};
                            response.headers.forEach(function(value, key) {
                                headers_1[key] = value;
                            });
                            requestEvent.responseHeaders = headers_1;
                            this.notifyEvent(requestEvent);
                            return [
                                2 /*return*/ ,
                                response
                            ];
                        case 3:
                            error_1 = _a.sent();
                            endTime = Date.now();
                            requestEvent.duration = endTime - startTime;
                            typedError = error_1;
                            requestEvent.error = {
                                name: typedError.name || 'UnknownError',
                                message: typedError.message || 'An unknown error occurred'
                            };
                            this.notifyEvent(requestEvent);
                            throw error_1;
                        case 4:
                            return [
                                2 /*return*/ 
                            ];
                    }
                });
            });
        };
        this.fetchObserver = function() {
            globalScope.fetch = originalFetch;
        };
    };
    return NetworkObservers;
}();
;
 //# sourceMappingURL=observers.js.map
}}),
}]);

//# sourceMappingURL=node_modules_%40amplitude_session-replay-browser_lib_esm_observers_478e444d.js.map